type contract @entity {
	id:                           ID!
	asERC721:                     collection
}

type account @entity {
	" the wallet address "
	id: ID!

	" The NFTs owned by this account "
	tokens: [token!]! @derivedFrom(field: "owner")
	
	" The transfers originating from this account "
	transfersFrom: [transfer!]! @derivedFrom(field: "senderAddress")
	
	" The transfers recevied by this account"
	transfersTo:   [transfer!]! @derivedFrom(field: "receiverAddress")
}

"replaces TokenRegistry"
type collection @entity {

    " The address of the collection "
    id: ID!
    
    " The name of the collection "
    name: String
	
	" The symbol for the collection "
	symbol: String

	" Tokens for the collection"
	tokens: [token!]! @derivedFrom(field: "collection")

	" Collection supports metadata "
	supportsMetadata: Boolean

    " Total sales "
    totalSales: Int!
		
    " Total volume "
    totalVolume: BigDecimal!
    
    " Top Sale ever "
    topSale: BigDecimal!
    
    " Daily info about the collection "
    dailyCollectionSnapshot:   [dailyCollectionSnapshot!]!   @derivedFrom(field: "collection") 
    
    " Weekly info about the collection "
    weeklyCollectionSnapshot:  [weeklyCollectionSnapshot!]!  @derivedFrom(field: "collection") 
    
    " Monthly info about the collection "
    monthlyCollectionSnapshot: [monthlyCollectionSnapshot!]! @derivedFrom(field: "collection") 

}

type token @entity {

    " The collection addrress - The token id "
    id: ID!  

    " The collection address "
    collection: collection!

    " The id of the NFT"
    identifier: BigInt!

    " Uri attempt on the NFT "
	uri: String

	" The address the currently owns the token "
	owner: account 
    
    " The NFT last price "
    lastPrice: BigDecimal!
    
    " The NFT top sale ever "
    topSale: BigDecimal!

	" Transfers involving this token "
	transfers: [transfer!]! @derivedFrom(field: "token")
}

type accountCollection @entity {
    " Account Id - Collection Id "
    id: ID!

    " Address of the account "
    account: account 

    " Address of the NFT Collection "
    collection: collection 

    " Count of NFT's owned in a collection by the Address"
    tokenCount: Int!

    " transfers from an address with a collection "
    transactions: [transaction!]! 

}

type transaction @entity {
  " the hash of the tx"
  id: ID!
  
  " Timestamp for block "
  timestamp: BigInt!
  
  " Block Number "
  blockNumber:	BigInt!

  " Address who initiated the transaction "
  transactionFrom: Bytes! 
  
  " Count of how many transfers were not matched to a sale "
  unmatchedTransferCount: Int!   

  " Transfers that occured within the transaction "
  transfers: [transfer!]! 

  " Sale events that occured within the transaction "
  sales: [sale!] @derivedFrom(field: "transaction")

  " Gas Spent "
  gasPrice: BigInt

}

type transfer @entity {

    " Block Number and Event Id in which the transfers event occured"
    id: ID!
    
	" Transaction hash in which the transfer event occured"
	transaction: transaction!

    " The collection address "
    collection: collection!
    
    " The collection addrress - The token id "
    token: token!
    
	" The sender address "
    senderAddress: account
    
    " The receiver address "
    receiverAddress: account
    
    " Timestamp for block "
    timestamp: BigInt!

    " Block Number "
    blockNumber: BigInt!

	" The amount of ETH paid"
    amount: BigDecimal!

	" matched sale event for the transfer "
	matchedSale: sale 
        
}

type sale @entity {
  " Block Number and Event Id in which the sale event occured"
  id: ID!
  
  " tx that the sale occured in "
  transaction: transaction!
  
  " the currency that the sale occred in "
  currency: currency

  " Timestamp for block "
  timestamp: BigInt!

  " Block Number "
  blockNumber: BigInt!

  " the amount of the sale "
  amount: BigDecimal!

  " The marketplace "	
  platform: String		

}

type currency @entity {
  " Currency Address "
  id: ID! 

  decimals: Int 

  name: String!

  symbol: String!

}

type hourlyCollectionSnapshot @entity {

    " The collection address - The day "
    id: ID!
    
    " The timestamp of the block "
    timestamp: Int
    
    " The collection address " 
    collection: collection!
    
    " The Hourly volume "
    hourlyVolume: BigDecimal!
    
    " Number of Hourly transactions "
    hourlyTransactions: Int

    " Average sale amount for the hour "
    hourlyAvgSale: BigDecimal!
    
    " Hourly top sales "
    topSale: BigDecimal!
    
    " Hourly bottom sales "
    bottomSale: BigDecimal!

}

type dailyCollectionSnapshot @entity {

    " The collection address - The day "
    id: ID!
    
    " The timestamp of the block "
    timestamp: Int
    
    " The collection address " 
    collection: collection!
    
    " The daily volume "
    dailyVolume: BigDecimal!
    
    " Number of daily transactions "
    dailyTransactions: Int

    " Average sale amount for the day "
    dailyAvgSale: BigDecimal!
    
    " Daily top sales "
    topSale: BigDecimal!
    
    " Daily bottom sales "
    bottomSale: BigDecimal!

}


type weeklyCollectionSnapshot @entity {

    " The collection address - The week "
    id: ID!
    
    " The timestamp of the block "
    timestamp: Int!
    
    " The collection address "
    collection: collection!
    
    " The weekly volume "
    weeklyVolume: BigDecimal!
    
    " Number of weekly transactions "
    weeklyTransactions: Int

    " Average sale amount for the week "
    weeklyAvgSale: BigDecimal!
    
    " weekly top sales "
    topSale: BigDecimal!
    
    " weekly bottom sales "
    bottomSale: BigDecimal!

}

type monthlyCollectionSnapshot @entity { 

    " The collection address - The month "
    id: ID!
    
    " The timestamp of the block "
    timestamp: Int!
    
    " The collection address "
    collection: collection!
    
    " The monthly volume "
    monthlyVolume: BigDecimal!  
    
    " Number of monthly transactions "
    monthlyTransactions: Int

    " Average sale amount for the month "
    monthlyAvgSale: BigDecimal!
    
    " monthly top sales "
    topSale: BigDecimal!
    
    " monthly bottom sales "
    bottomSale: BigDecimal!

}